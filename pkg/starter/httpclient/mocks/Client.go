// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import http "net/http"

import io "io"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields: url, headers, callbacks
func (_m *Client) Delete(url string, headers http.Header, callbacks ...func(*http.Request)) (*http.Response, error) {
	_va := make([]interface{}, len(callbacks))
	for _i := range callbacks {
		_va[_i] = callbacks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header, ...func(*http.Request)) *http.Response); ok {
		r0 = rf(url, headers, callbacks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header, ...func(*http.Request)) error); ok {
		r1 = rf(url, headers, callbacks...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Do provides a mock function with given fields: req
func (_m *Client) Do(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: url, headers, callbacks
func (_m *Client) Get(url string, headers http.Header, callbacks ...func(*http.Request)) (*http.Response, error) {
	_va := make([]interface{}, len(callbacks))
	for _i := range callbacks {
		_va[_i] = callbacks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header, ...func(*http.Request)) *http.Response); ok {
		r0 = rf(url, headers, callbacks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header, ...func(*http.Request)) error); ok {
		r1 = rf(url, headers, callbacks...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: url, body, headers, callbacks
func (_m *Client) Patch(url string, body io.Reader, headers http.Header, callbacks ...func(*http.Request)) (*http.Response, error) {
	_va := make([]interface{}, len(callbacks))
	for _i := range callbacks {
		_va[_i] = callbacks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, body, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader, http.Header, ...func(*http.Request)) *http.Response); ok {
		r0 = rf(url, body, headers, callbacks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, http.Header, ...func(*http.Request)) error); ok {
		r1 = rf(url, body, headers, callbacks...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: url, body, headers, callbacks
func (_m *Client) Post(url string, body io.Reader, headers http.Header, callbacks ...func(*http.Request)) (*http.Response, error) {
	_va := make([]interface{}, len(callbacks))
	for _i := range callbacks {
		_va[_i] = callbacks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, body, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader, http.Header, ...func(*http.Request)) *http.Response); ok {
		r0 = rf(url, body, headers, callbacks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, http.Header, ...func(*http.Request)) error); ok {
		r1 = rf(url, body, headers, callbacks...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: url, body, headers, callbacks
func (_m *Client) Put(url string, body io.Reader, headers http.Header, callbacks ...func(*http.Request)) (*http.Response, error) {
	_va := make([]interface{}, len(callbacks))
	for _i := range callbacks {
		_va[_i] = callbacks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, body, headers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader, http.Header, ...func(*http.Request)) *http.Response); ok {
		r0 = rf(url, body, headers, callbacks...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, http.Header, ...func(*http.Request)) error); ok {
		r1 = rf(url, body, headers, callbacks...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
